---
title: "Habitaci√≥n 4"
---

<h2 class="text-center">
üéØ Relaci√≥n entre diferentes estad√≠sticas 
</h2>




<center>
<img src="./img/sala_p4.png" width="500">
</center>


<br/>

La sala est√° llena de pantallas mostrando batallas Pok√©mon.  
La pantalla principal muestra un nuevo mensaje del **Profesor Oak**:

<div class="alert alert-info">
"Antes de elegir al Pok√©mon m√°s fuerte, observa la relaci√≥n entre sus estad√≠sticas.  
¬øAtaque y Defensa crecen juntos, compiten entre s√≠‚Ä¶ o no parecen relacionarse?"
</div>


## ‚úÖ Pregunta principal

**¬øQu√© tan relacionada est√° `Attack` con `Defense`?**  
Observa el gr√°fico de dispersi√≥n y comenta si la relaci√≥n parece **positiva**, **negativa** o **d√©bil/nula**.  
Luego, explora **otros pares** de estad√≠sticas para comparar patrones.



## üß™ Qu√© haremos

1. Elegir dos estad√≠sticas de combate (`col_x` y `col_y`) ‚Äî por defecto `Attack` y `Defense`.  
2. Crear un **gr√°fico de dispersi√≥n personalizable** (color, tama√±o, l√≠nea de tendencia opcional).  
3. Definir en **`respuesta`** el **tipo** de correlaci√≥n entre las estad√≠sticas seleccionadas.

::: {.callout-tip title="Sugerencias para analizar" collapse="true"}
- Si los puntos suben hacia la derecha, la relaci√≥n es **positiva**; si bajan, **negativa**; si est√°n dispersos, **d√©bil o nula**.  
- Una ‚Äúsuma‚Äù puede sesgar si las escalas son distintas; como alternativa, podr√≠as estandarizar (z-score) antes de sumar.  
- **Opcional**: calcula la correlaci√≥n de Pearson con `df[[col_x, col_y]].corr()`.
:::



## Tu C√≥digo
```{pyodide-python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Cargar datos ---
url = 'https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv'
df = pd.read_csv(url)

print("Mostrando primeras filas:")
print(df.head())
```

```{pyodide-python}
# --- Par√°metros personalizables ---
# Elige dos estad√≠sticas para comparar:
col_x = 'Attack'   # Cambia por: 'HP', 'Attack', 'Defense', 'Speed'
col_y = 'Defense'  # Cambia por: 'HP', 'Attack', 'Defense', 'Speed'

# Est√©tica del gr√°fico:
color_puntos = 'tab:blue'  # 'tab:orange', 'tab:green', 'red', etc.
alpha_puntos = 0.7
tamano_base = 40           # tama√±o de los puntos
tamano_por = None          # opcional: 'HP', 'Speed' para escalar tama√±o por una columna, o None

# L√≠nea de tendencia:
dibujar_tendencia = True

# --- Validaciones simples ---
stats_validas = ['HP', 'Attack', 'Defense', 'Speed']
if col_x not in stats_validas or col_y not in stats_validas:
    raise ValueError(f"Elige columnas dentro de {stats_validas}")

# --- Columna suma y Top 5 ---
df['suma'] = df[col_x] + df[col_y]
tabla_top5 = df[['Name', col_x, col_y, 'suma']].sort_values('suma', ascending=False).head(5)

# --- Tama√±os adaptativos (opcional) ---
if tamano_por in stats_validas:
    # Escala simple para que no explote el tama√±o
    vals = df[tamano_por].fillna(df[tamano_por].median())
    sizes = tamano_base * (vals - vals.min()) / (vals.max() - vals.min() + 1e-9) + tamano_base
else:
    sizes = tamano_base

# --- Gr√°fico de dispersi√≥n ---
plt.figure(figsize=(8, 7))
plt.scatter(df[col_x], df[col_y], s=sizes, alpha=alpha_puntos, edgecolor='k', linewidth=0.3, color=color_puntos)

plt.title(f'Relaci√≥n entre {col_x} y {col_y} (Pok√©mon)', fontsize=15, fontweight='bold')
plt.xlabel(col_x)
plt.ylabel(col_y)
plt.grid(alpha=0.4)

# L√≠nea de tendencia (m√≠nimos cuadrados)
if dibujar_tendencia:
    m, b = np.polyfit(df[col_x], df[col_y], 1)
    xs = np.linspace(df[col_x].min(), df[col_x].max(), 200)
    ys = m * xs + b
    plt.plot(xs, ys, linestyle='--', linewidth=2)

plt.show()
```

```{pyodide-python}
# --- (Medir correlaci√≥n ---
print("\nMatriz de correlaci√≥n (Pearson):")
print(df[[col_x, col_y]].corr().round(3))

# Tipo de correlaci√≥n:
respuesta = None

# --- Verificaci√≥n ---
import verificar
verificar.salon_44(respuesta)
````

