---
title: "Habitaci√≥n 3"
---

<h2 class="text-center">
‚öîÔ∏è Sala de An√°lisis de Estad√≠sticas
</h2>

<br/>

<center>
<img src="./img/sala_p3.png" width="700">
</center>

<br/>

La pantalla principal se ilumina y muestra un nuevo mensaje del **Profesor Oak**:

<div class="alert alert-info">
"Cada tipo de Pok√©mon tiene fortalezas y debilidades.  
Responde con precisi√≥n:  
<b>¬øQu√© tipo posee el promedio m√°s alto de HP, Attack, Defense y Speed?</b>  
</div>

## üéØ Objetivo de la sala

1. Agrupa por `Type 1` y calcula el **promedio** de `HP`, `Attack`, `Defense`, `Speed`.  
2. Guarda la tabla resultante en **`promedio`**.  
3. Define:  
   - **`respuesta_lista`** = lista con el tipo ganador por promedio en **este orden**: `['HP','Attack','Defense','Speed']`.  

::: {.callout-tip title="Agrupar y seleccionar estad√≠sticas" collapse="true"}
Promedios por tipo:
```python
promedio = df.groupby('Type 1')[['HP','Attack','Defense','Speed']].mean().round(2)
````

Tipo con mayor/menor promedio:

```python
tipo_mas_ataque   = promedio['Attack'].idxmax()
tipo_menos_ataque = promedio['Attack'].idxmin()
```

Lista de ganadores por estad√≠stica (en orden fijo):

```python
orden = ['HP','Attack','Defense','Speed']
respuesta_lista = [promedio[c].idxmax() for c in orden]
```
:::

## üß© Desaf√≠o de la Sala

```{pyodide-python}
# Cargar datos
import pandas as pd
import matplotlib.pyplot as plt

url = 'https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv'
df = pd.read_csv(url)

# 1) Agrupar y calcular promedios
cols_stats = ['HP', 'Attack', 'Defense', 'Speed']
promedio = None
print("Promedios por tipo (redondeados):")
print(promedio)
```

```{pyodide-python}
# 2) Gr√°fico Top-10 din√°mico por m√©trica
metrica = 'Attack'   # Cambia a 'HP', 'Defense' o 'Speed' y vuelve a ejecutar

if metrica not in cols_stats:
    raise ValueError(f"M√©trica inv√°lida: {metrica}. Usa una de {cols_stats}")

top10 = promedio.sort_values(by=metrica, ascending=False)[metrica].head(10)

plt.figure(figsize=(8,7))
bars = top10.plot(kind='bar', edgecolor='black')

plt.title(f"Top 10 tipos por {metrica} promedio", fontsize=15, fontweight='bold')
plt.xlabel("Tipo de Pok√©mon", fontsize=12)
plt.ylabel(f"{metrica} promedio", fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.6)

# Etiquetas num√©ricas encima de cada barra
for p in bars.patches:
    height = p.get_height()
    bars.annotate(f'{height:.1f}',
                  (p.get_x() + p.get_width()/2, height),
                  ha='center', va='bottom', fontsize=9, xytext=(0,3), textcoords='offset points')

plt.show()
```


```{pyodide-python}
# 3) Respuestas pedidas (lista completa)
orden = ['HP', 'Attack', 'Defense', 'Speed']
respuesta = None
print("üèÜ Ganadores por estad√≠stica [HP, Attack, Defense, Speed]:")
print(respuesta)

# Verifica tu respuesta (seg√∫n especificaci√≥n existente)
import verificar
verificar.salon_33(respuesta)
```



